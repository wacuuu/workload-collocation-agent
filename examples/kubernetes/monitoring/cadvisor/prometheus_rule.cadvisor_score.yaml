apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  labels:
    role: prometheus-rules
  name: prometheus-cadvisor-score
  namespace: prometheus
spec:
  groups:

  - name: score
    rules:

    # ============================ node ===================================
    # cpu
    - record: node_capacity_unsafe
      expr: 'sum(machine_cpu_cores) by (machine_id)'
      labels:
        dim: cpu


  #   # mem
    - record: node_capacity_unsafe
    # TODO platform_mem_mode_size_bytes do zrobienia
      expr: 'ceil((sum(platform_mem_mode_size_bytes) by (node) / 1e9)) and on(node) platform_mem_mode_size_bytes!=0'
      labels:
        dim: mem
    - record: node_capacity_unsafe
      # TODO platform_mem_mode_size_bytes do zrobienia
      expr: 'ceil(sum(machine_dimm_capacity_bytes) by (machine_id) / 1e9) and on(machine_id) platform_mem_mode_size_bytes==0'
      labels:
        dim: mem




  #   #mbw
      # TODO nie ma tej metryki chyba
      # TODO platform_mem_mode_size_bytes do zrobienia
    - record: node_capacity_unsafe
      expr: 'ceil(sum(platform_nvdimm_read_bandwidth_bytes_per_second) by (node) / 1e9) and on(node) platform_mem_mode_size_bytes!=0'
      labels:
        dim: mbw_flat
    - record: node_capacity_unsafe
      expr: 'ceil(sum(platform_dimm_speed_bytes_per_second) by (node) / 1e9) and on(node) platform_mem_mode_size_bytes==0'
      labels:
        dim: mbw_flat

  #   # wss
  #   # -- wss on 2lm is devaulated to 30% because of direct mapping (that is approximated by us unsafe maximum)
  # TODO platform_mem_mode_size_bytes do zrobienia
    - record: node_capacity_unsafe
      expr: 'ceil(sum(machine_dimm_capacity_bytes) by (machine_id) * 0.3 / 1e9) and on(machine_id) platform_mem_mode_size_bytes!=0'
      labels:
        dim: wss
      # -- ws on 1lm nodes is just capacity of ram
    - record: node_capacity_unsafe
      expr: 'ceil(sum(machine_dimm_capacity_bytes) by (machine_id) / 1e9) and on(machine_id) platform_mem_mode_size_bytes==0'
      labels:
        dim: wss

  #   # safety weights: we don't want to fill any resource to it limit;
    - record: safety_weights
      expr: '0.7'
      labels:
        dim: cpu
    - record: safety_weights
      expr: '0.9'
      labels:
        dim: mem
    - record: safety_weights
      expr: '0.7'
      labels:
        dim: mbw_flat
    - record: safety_weights
      expr: '0.66'
      labels:
        dim: wss

    - record: node_capacity
      expr: node_capacity_unsafe * on(dim) group_left safety_weights

  #   # ---------------------------- node PMEM profile -----------------------------------------

  #   # Profile by mem
    - record: profile_node_by_mem
      expr: 'node_capacity{dim="cpu"} / on (machine_id) node_capacity{dim="mem"}'
      labels:
        index: cpu
    - record: profile_node_by_mem
      expr: 'node_capacity{dim="mbw_flat"} / on (machine_id) node_capacity{dim="mem"}'
      labels:
        index: mbw_flat
    - record: profile_node_by_mem
      expr: 'node_capacity{dim="wss"} / on (machine_id) node_capacity{dim="mem"}'
      labels:
        index: wss

  #   # Note: average (avg) all PMEM nodes
  # TODO platform_mem_mode_size_bytes do zrobienia
    - record: profile_nodes_by_mem
      expr: 'avg(profile_node_by_mem and on(machine_id) platform_mem_mode_size_bytes != 0) by (index)'
      labels:
        memory: 2lm

  #   # Additional metric: read/write assymetry ratio (on 1lm equal to 1, on 2lm ~= 4)
    - record: node_mbw_write_weight
    # nie ma tej metryki
      expr: '(avg(ceil(sum(platform_nvdimm_read_bandwidth_bytes_per_second)  by (machine_id)) and on(machine_id) platform_mem_mode_size_bytes!=0) by (machine_id)) /
             (avg(ceil(sum(platform_nvdimm_write_bandwidth_bytes_per_second) by (machine_id)) and on(machine_id) platform_mem_mode_size_bytes!=0) by (machine_id))'
      labels:
        memory: 2lm
  #   # ============================ apps ===================================

  #   # Helper metrics
  #   # Note: heuristic for approximation of R/W ratio for a task; 30s set to be sure to have in each range at least 2 points;
    - record: task_memory_rw_ratio
      expr: '(rate(container_perf_events_total{event="offcore_requests.demand_data_rd"}[30s]) + rate(container_perf_events_total{event="offcore_requests.demand_rfo"}[30s])) /
             (rate(container_perf_events_total{event="offcore_requests.demand_data_rd"}[30s]) + 2*rate(container_perf_events_total{event="offcore_requests.demand_rfo"}[30s]))'
    - record: task_mbw
      expr: 'rate(task_mem_bandwidth_bytes[30s]) / 1e9'
    - record: task_memory_rw_ratio_
      expr: 'task_memory_rw_ratio'
      labels:
        memory: 2lm
    - record: task_mbw_
      expr: 'task_mbw'
      labels:
        memory: 2lm
    - record: task_mbw_read
      expr: 'task_mbw_ * task_memory_rw_ratio_'
    - record: task_mbw_write
      expr: '(1 - task_memory_rw_ratio_) * task_mbw_ * on(memory) group_left node_mbw_write_weight'
    - record: task_mbw_flat
      expr: 'task_mbw_read + task_mbw_write'

    - record: app_cpu
    # TODO co to task_requested_cpus
      expr: 'max(max_over_time(task_requested_cpus[7d])) by (app)'
    - record: app_mem
    # TODO task_requested_mem_bytes
      expr: 'max(max_over_time(task_requested_mem_bytes[7d])) by (app) / 1e9'
    - record: app_mbw_flat
      expr: 'max(quantile_over_time(0.95, task_mbw_flat[7d:2m])) by (app)'
    - record: app_wss
      expr: 'max(quantile_over_time(0.95, task_wss_referenced_bytes[7d:2m])) by (app) / 1e9'

    - record: app_req
      expr: 'app_cpu'
      labels:
        dim: cpu
    - record: app_req
      expr: 'app_mem'
      labels:
        dim: mem
    - record: app_req
      expr: 'app_mbw_flat'
      labels:
        dim: mbw_flat
    - record: app_req
      expr: 'app_wss'
      labels:
        dim: wss

  #   # --------------------- Profiles APP -----------------------
  #   #
  #   # app profile by mem
    - record: profile_app_by_mem
      expr: 'app_req{dim="cpu"} / on(app) app_req{dim="mem"}'
      labels:
        index: cpu
    - record: profile_app_by_mem
      expr: 'app_req{dim="mbw_flat"} / on(app) app_req{dim="mem"}'
      labels:
        index: mbw_flat
    - record: profile_app_by_mem
      expr: 'app_req{dim="wss"} / on(app) app_req{dim="mem"}'
      labels:
        index: wss

  #   # ======================== normalization profile ========================
    - record: profile_app_by_mem_norm
      expr: 'profile_app_by_mem / on (index) group_left profile_nodes_by_mem{memory="2lm"}'

  #   # ======================== SCORE calculation ==========================
    - record: profile_app_2lm_score_max # lower is better for 2lm
      expr: 'max(profile_app_by_mem_norm{index=~"cpu|mbw_flat|wss"}) by (app)'

  - name: cluster-score-data-provider
    rules:
      - record: node_type
        expr: 'platform_mem_mode_size_bytes > 0'
        labels:
          nodetype: pmem

      - record: node_type
        expr: 'platform_mem_mode_size_bytes == 0'
        labels:
          nodetype: dram

      - record: node_type
        expr: 'platform_mem_mode_size_bytes < 0'
        labels:
          nodetype: unknown

      - record: app_profile
        expr: 'profile_app_2lm_score_max'
