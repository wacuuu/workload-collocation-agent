apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  labels:
    role: prometheus-rules
  name: prometheus-cadvisor-score
  namespace: prometheus
spec:
  groups:
  - name: reference-node-scoring
    rules:

    # ============================ node ===================================
    # cpu
    - record: node_capacity_unsafe
      expr: 'sum(machine_cpu_cores) by (node)'
      labels:
        dim: cpu
        source: cadvisor
    # mem
    - record: node_capacity_unsafe
      expr: 'ceil((sum(machine_nvm_capacity{mode="memory_mode"}) by (node) / 1e9)) and on(node) machine_nvm_capacity{mode="memory_mode"}!=0'
      labels:
        dim: mem
        source: cadvisor
    - record: node_capacity_unsafe
      expr: 'ceil(sum(machine_dimm_capacity_bytes{type=~".+DDR.+"}) by (node) / 1e9) and on(node) machine_nvm_capacity{mode="memory_mode"}==0'
      labels:
        dim: mem
        source: cadvisor
    - record: node_capacity_unsafe
      expr: 'ceil(sum(platform_nvdimm_read_bandwidth_bytes_per_second) by (node) / 1e9) and on(node) platform_mem_mode_size_bytes!=0'
      labels:
        dim: mbw_flat
        source: cadvisor
    - record: node_capacity_unsafe
      expr: 'ceil(sum(platform_dimm_speed_bytes_per_second) by (node) / 1e9) and on(node) platform_mem_mode_size_bytes==0'
      labels:
        dim: mbw_flat
        source: cadvisor
    # -- 2LM:  0.5, NOTE: wss devaluated to 50% because of direct mapping (that is approximated by us unsafe maximum)
    # -- HMEM: 1.0, NOTE: kernel based managing of DRAM memory
    - record: pmem_mode_wss_weight
      expr: '0.5' # pmem_mode_wss_weight
    # -- wss on 2lm is devaulated to 30% because of direct mapping (that is approximated by us unsafe maximum)
    - record: node_capacity_unsafe
      expr: 'ceil(sum(machine_dimm_capacity_bytes{type=~".+DDR.+"}) by (node) * on() group_left pmem_mode_wss_weight / 1e9) and on(node) machine_nvm_capacity{mode="memory_mode"}!=0'
      labels:
        dim: wss
        source: cadvisor
    # -- wss on 1lm nodes is just capacity of ram
    - record: node_capacity_unsafe
      expr: 'ceil(sum(machine_dimm_capacity_bytes{type=~".+DDR.+"}) by (node) / 1e9) and on(node) machine_nvm_capacity{mode="memory_mode"}==0'
      labels:
        dim: wss
        source: cadvisor

    # safety weights: we don't want to fill any resource to it limit;
    - record: safety_weights
      expr: '0.7'
      labels:
        dim: cpu
        source: cadvisor
    - record: safety_weights
      expr: '0.9'
      labels:
        dim: mem
        source: cadvisor
    - record: safety_weights
      expr: '0.7'
      labels:
        dim: mbw_flat
        source: cadvisor
    - record: safety_weights
      expr: '0.9'
      labels:
        dim: wss
        source: cadvisor

    - record: node_capacity
      expr: node_capacity_unsafe * on(dim) group_left safety_weights

    # ---------------------------- node PMEM profile -----------------------------------------

    # Profile by mem
    - record: profile_node_by_mem
      expr: 'node_capacity{dim="cpu",source="cadvisor"} / on (node) node_capacity{dim="mem",source="cadvisor"}'
      labels:
        index: cpu
        source: cadvisor
    - record: profile_node_by_mem
      expr: 'node_capacity{dim="mbw_flat",source="cadvisor"} / on (node) node_capacity{dim="mem",source="cadvisor"}'
      labels:
        index: mbw_flat
        source: cadvisor
    - record: profile_node_by_mem
      expr: 'node_capacity{dim="wss",source="cadvisor"} / on (node) node_capacity{dim="mem",source="cadvisor"}'
      labels:
        index: wss
        source: cadvisor

    # Note: average (avg) all PMEM nodes
    - record: profile_nodes_by_mem
      expr: 'avg(profile_node_by_mem{source="cadvisor"} and on(node) machine_nvm_capacity{mode="memory_mode",source="cadvisor"} != 0) by (index)'
      labels:
        memory: 2lm
        source: cadvisor

    # Additional metric: read/write assymetry ratio (on 1lm equal to 1, on 2lm ~= 4)
    - record: node_mbw_write_weight
      expr: '(avg(ceil(sum(platform_nvdimm_read_bandwidth_bytes_per_second{source="cadvisor"})  by (node)) and on(node) machine_nvm_capacity{mode="memory_mode",source="cadvisor"}!=0) by (node)) /
             (avg(ceil(sum(platform_nvdimm_write_bandwidth_bytes_per_second{source="cadvisor"}) by (node)) and on(node) machine_nvm_capacity{mode="memory_mode",source="cadvisor"}!=0) by (node))'
      labels:
        memory: 2lm
        source: cadvisor

  - name: app-data-gathering
    rules:
    # ============================ workload identification =======================
    - record: container_perf_events_total_relabeled
      expr: label_replace(container_perf_events_total, "exported_pod", "$1", "container_label_io_kubernetes_pod_name", "(.*)+$")
    - record: container_perf_events_total_extended_
      expr: container_perf_events_total_relabeled * on(exported_pod) group_left(label_app) kube_pod_labels
    - record: container_perf_events_total_extended
      expr: container_perf_events_total_extended_ * on() group_left(source) metric_source{source="cadvisor"}

    - record: container_memory_bandwidth_bytes_relabeled
      expr: label_replace(container_memory_bandwidth_bytes, "exported_pod", "$1", "container_label_io_kubernetes_pod_name", "(.*)+$")
    - record: container_memory_bandwidth_bytes_extended_
      expr: container_memory_bandwidth_bytes_relabeled * on(exported_pod) group_left(label_app) kube_pod_labels
    - record: container_memory_bandwidth_bytes_extended
      expr: container_memory_bandwidth_bytes_extended_ * on() group_left(source) metric_source{source="cadvisor"}

    - record: container_referenced_bytes_relabeled
      expr: label_replace(container_referenced_bytes, "exported_pod", "$1", "container_label_io_kubernetes_pod_name", "(.*)+$")
    - record: container_referenced_bytes_extended_
      expr: container_referenced_bytes_relabeled * on(exported_pod) group_left(label_app) kube_pod_labels
    - record: container_referenced_bytes_extended
      expr: container_referenced_bytes_extended_ * on() group_left(source) metric_source{source="cadvisor"}


    # ============================ aggregate by pod =======================
    - record: container_offcore_requests_demand_data_rd_rate
      expr: rate(container_perf_events_total_extended{event="offcore_requests.demand_data_rd",container_label_io_kubernetes_pod_uid=~".+",node=~".+",label_app=~".+",source="cadvisor"}[30s])
    - record: pod_offcore_requests_demand_data_rd
      expr: sum(container_offcore_requests_demand_data_rd_rate) by(container_label_io_kubernetes_pod_uid,container_label_io_kubernetes_pod_name,node,label_app,source)


    - record: container_offcore_requests_demand_rfo_rate
      expr: rate(container_perf_events_total_extended{event="offcore_requests.demand_rfo",container_label_io_kubernetes_pod_uid=~".+",node=~".+",label_app=~".+",source="cadvisor"}[30s])
    - record: pod_offcore_requests_demand_rfo
      expr: sum(container_offcore_requests_demand_rfo_rate) by(container_label_io_kubernetes_pod_uid,container_label_io_kubernetes_pod_name,node,label_app,source)


    - record: container_mbw_rate
      expr: rate(container_memory_bandwidth_bytes_extended{container_label_io_kubernetes_pod_uid=~".+",node=~".+",label_app=~".+",source="cadvisor"}[30s])
    - record: pod_mbw
      expr: sum(container_mbw_rate) by(container_label_io_kubernetes_pod_uid,container_label_io_kubernetes_pod_name,node,label_app,source) / 1e9

    - record: pod_wss
      expr: sum(container_referenced_bytes_extended{container_label_io_kubernetes_pod_uid=~".+",node=~".+",label_app=~".+",source="cadvisor"}) by(container_label_io_kubernetes_pod_uid,container_label_io_kubernetes_pod_name,node,label_app,source) / 1e9
    # ============================ apps ===================================
    # Helper metrics
    # Note: heuristic for approximation of R/W ratio for a task; 30s set to be sure to have in each range at least 2 points;
    - record: task_memory_rw_ratio
      expr: '(pod_offcore_requests_demand_data_rd + pod_offcore_requests_demand_rfo) / (pod_offcore_requests_demand_data_rd + 2*pod_offcore_requests_demand_rfo)'
      labels:
        source: cadvisor
    - record: task_mbw
      expr: 'pod_mbw'
      labels:
        source: cadvisor
    - record: task_memory_rw_ratio_
      expr: 'task_memory_rw_ratio'
      labels:
        memory: 2lm
        source: cadvisor
    - record: task_mbw_
      expr: 'task_mbw'
      labels:
        memory: 2lm
        source: cadvisor
    - record: task_mbw_read
      expr: 'task_mbw_{source="cadvisor"} * task_memory_rw_ratio_{source="cadvisor"}'
      labels:
        source: cadvisor
    - record: task_mbw_write
      expr: '(1 - task_memory_rw_ratio_{source="cadvisor"}) * task_mbw_{source="cadvisor"} * on(memory) group_left node_mbw_write_weight{source="cadvisor"}'
      labels:
        source: cadvisor
    - record: task_mbw_flat
      expr: 'task_mbw_read{source="cadvisor"} + task_mbw_write{source="cadvisor"}'
      labels:
        source: cadvisor

    # @TODO to be replaced by proper way of calculating WSS, similar to wca/wss.py
    - record: task_working_set_size_bytes
      expr: 'pod_wss'

    # Ignore first 30m=3m*10=30m of run of each task for WSS, MBW.
    - record: task_mbw_flat_ignore_initialization
      expr: 'task_mbw_flat and count_over_time(task_mbw_flat[30m:3m]) >= 9'
    - record: task_wss_ignore_initialization
      expr: 'task_working_set_size_bytes and count_over_time(task_working_set_size_bytes[30m:3m]) >= 9'

  - name: app-requirements
    rules:
    # ============================ app requests ===================================
    - record: app_limits_cpu
      expr: kube_pod_container_resource_limits_cpu_cores * on(exported_pod,exported_namespace) group_left(label_app) kube_pod_labels
    - record: app_requests_cpu
      expr: kube_pod_container_resource_requests_cpu_cores * on(exported_pod,exported_namespace) group_left(label_app) kube_pod_labels
    - record: app_requests_cpu_
      expr: sum(app_requests_cpu) by (label_app,exported_pod)
    - record: app_requests_memory_bytes
      expr: kube_pod_container_resource_requests_memory_bytes * on(exported_pod,exported_namespace) group_left(label_app) kube_pod_labels
    - record: app_requests_memory_bytes_
      expr: sum(app_requests_memory_bytes) by (label_app,exported_pod)

    - record: app_cpu_
      expr: 'max(max_over_time(app_requests_cpu_{label_app=~".+"}[2m])) by (label_app)'
      labels:
        source: cadvisor
    - record: app_mem_
      expr: 'max(max_over_time(app_requests_memory_bytes_{label_app=~".+"}[2m])) by (label_app) / 1e9'
      labels:
        source: cadvisor
    - record: app_mbw_flat_
      expr: 'quantile(0.95, quantile_over_time(0.99, task_mbw_flat_ignore_initialization{label_app=~".+"}[2m:10s])) by (label_app, source)'
    - record: app_wss_
      expr: 'quantile(0.95, quantile_over_time(0.95, task_wss_ignore_initialization{label_app=~".+"}[2m:10s])) by (label_app, source)'

    # For graphana dashboard.
    - record: app_count
      expr: count(task_up) by (app)

    - expr: label_replace(app_cpu_, "app", "$1", "label_app", "(.*)+$")
      record: app_cpu
      labels:
        source: cadvisor
    - expr: label_replace(app_mem_, "app", "$1", "label_app", "(.*)+$")
      record: app_mem
      labels:
        source: cadvisor
    - expr: label_replace(app_mbw_flat_, "app", "$1", "label_app", "(.*)+$")
      record: app_mbw_flat
      labels:
        source: cadvisor
    - expr: label_replace(app_wss_, "app", "$1", "label_app", "(.*)+$")
      record: app_wss
      labels:
        source: cadvisor

  - name: profiling
    rules:
    - record: app_req
      expr: 'app_cpu'
      labels:
        dim: cpu
    - record: app_req
      expr: 'app_mem'
      labels:
        dim: mem
    - record: app_req
      expr: 'app_mbw_flat'
      labels:
        dim: mbw_flat
    - record: app_req
      expr: 'app_wss'
      labels:
        dim: wss

    # --------------------- Profiles APP -----------------------
    #
    # app profile by mem
    - record: profile_app_by_mem
      expr: 'app_req{dim="cpu"} / on(label_app, source) app_req{dim="mem"}'
      labels:
        index: cpu
    - record: profile_app_by_mem
      expr: 'app_req{dim="mbw_flat"} / on(label_app, source) app_req{dim="mem"}'
      labels:
        index: mbw_flat
    - record: profile_app_by_mem
      expr: 'app_req{dim="wss"} / on(label_app, source) app_req{dim="mem"}'
      labels:
        index: wss

  - name: score
    rules:
    # ======================== normalization profile ========================
    - record: profile_app_by_mem_norm
      expr: 'profile_app_by_mem / on (index, source) group_left profile_nodes_by_mem{memory="2lm"}'

    # Must contains all 3 dimensions: cpu, wss, membw.
    - record: profile_app_by_mem_norm_3dim
      expr: profile_app_by_mem_norm and on(app, source) count(profile_app_by_mem_norm) by (app, source) == 3

    # ======================== SCORE calculation ==========================
    - record: profile_app_score_max # lower is better for 2lm
      expr: 'max(profile_app_by_mem_norm{index=~"cpu|mbw_flat|wss",source="cadvisor"}) by (label_app, source)'

  # - name: cluster-score-data-provider
  #   rules:
  #     - record: node_type
  #       expr: 'platform_mem_mode_size_bytes > 0'
  #       labels:
  #         nodetype: pmem

  #     - record: node_type
  #       expr: 'platform_mem_mode_size_bytes == 0'
  #       labels:
  #         nodetype: dram

  #     - record: node_type
  #       expr: 'platform_mem_mode_size_bytes < 0'
  #       labels:
  #         nodetype: unknown

  #     - record: app_profile
  #       expr: 'profile_app_2lm_score_max'
